{
  "hash": "63ef11cd4fef1bc5aa8bc31472bccc72",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Modern Tooling to Create Development Triangles '\ndescription: 'Build development triangles using Pandas, Polars, and DuckDB'\nauthor: Zachary Luety\ndate: 11/15/2024\nimage: chart.png\noutput-dir: docs\ncategories:\n  - code\n  - analysis\ndraft: false\n---\n\n# Making Loss Development triangles\n\nIn this post we'll look at 3 ways to create a loss development triangle using Pandas, Polars, and DuckDB.\n\n::: {#998d587d .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nfrom pathlib import Path\n\nimport duckdb\nimport pandas as pd\nimport polars as pl\n```\n:::\n\n\nFor this post, we will use the PP Auto Dataset available on the [CAS website](https://www.casact.org/sites/default/files/2021-04/ppauto_pos.csv).\n\n::: {#e18ad796 .cell execution_count=2}\n``` {.python .cell-code}\ndata_filepath = 'https://www.casact.org/sites/default/files/2021-04/ppauto_pos.csv'\n```\n:::\n\n\n## Pandas\n\n::: {#12032fcf .cell execution_count=3}\n``` {.python .cell-code}\ndata = (\n    pd.read_csv(data_filepath)\n    .query(\"GRCODE == 43 and DevelopmentYear <= 1997\") # filter to single insurer and exclude the bottom right of the development triangle\n)\ndata.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>GRCODE</th>\n      <th>GRNAME</th>\n      <th>AccidentYear</th>\n      <th>DevelopmentYear</th>\n      <th>DevelopmentLag</th>\n      <th>IncurLoss_B</th>\n      <th>CumPaidLoss_B</th>\n      <th>BulkLoss_B</th>\n      <th>EarnedPremDIR_B</th>\n      <th>EarnedPremCeded_B</th>\n      <th>EarnedPremNet_B</th>\n      <th>Single</th>\n      <th>PostedReserve97_B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>43</td>\n      <td>IDS Property Cas Ins Co</td>\n      <td>1988</td>\n      <td>1988</td>\n      <td>1</td>\n      <td>607</td>\n      <td>133</td>\n      <td>226</td>\n      <td>957</td>\n      <td>62</td>\n      <td>895</td>\n      <td>0</td>\n      <td>73044</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>43</td>\n      <td>IDS Property Cas Ins Co</td>\n      <td>1988</td>\n      <td>1989</td>\n      <td>2</td>\n      <td>647</td>\n      <td>333</td>\n      <td>129</td>\n      <td>957</td>\n      <td>62</td>\n      <td>895</td>\n      <td>0</td>\n      <td>73044</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>43</td>\n      <td>IDS Property Cas Ins Co</td>\n      <td>1988</td>\n      <td>1990</td>\n      <td>3</td>\n      <td>582</td>\n      <td>431</td>\n      <td>38</td>\n      <td>957</td>\n      <td>62</td>\n      <td>895</td>\n      <td>0</td>\n      <td>73044</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>43</td>\n      <td>IDS Property Cas Ins Co</td>\n      <td>1988</td>\n      <td>1991</td>\n      <td>4</td>\n      <td>598</td>\n      <td>570</td>\n      <td>19</td>\n      <td>957</td>\n      <td>62</td>\n      <td>895</td>\n      <td>0</td>\n      <td>73044</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>43</td>\n      <td>IDS Property Cas Ins Co</td>\n      <td>1988</td>\n      <td>1992</td>\n      <td>5</td>\n      <td>614</td>\n      <td>615</td>\n      <td>0</td>\n      <td>957</td>\n      <td>62</td>\n      <td>895</td>\n      <td>0</td>\n      <td>73044</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTo create the triangle we use the pivot_table method.\n\n::: {#55e31e5f .cell execution_count=4}\n``` {.python .cell-code}\ndata.pivot(\n    values=\"CumPaidLoss_B\",\n    index=\"AccidentYear\",\n    columns=\"DevelopmentLag\",\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>DevelopmentLag</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n      <th>10</th>\n    </tr>\n    <tr>\n      <th>AccidentYear</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1988</th>\n      <td>133.0</td>\n      <td>333.0</td>\n      <td>431.0</td>\n      <td>570.0</td>\n      <td>615.0</td>\n      <td>615.0</td>\n      <td>615.0</td>\n      <td>614.0</td>\n      <td>614.0</td>\n      <td>614.0</td>\n    </tr>\n    <tr>\n      <th>1989</th>\n      <td>934.0</td>\n      <td>1746.0</td>\n      <td>2365.0</td>\n      <td>2579.0</td>\n      <td>2763.0</td>\n      <td>2966.0</td>\n      <td>2940.0</td>\n      <td>2978.0</td>\n      <td>2978.0</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1990</th>\n      <td>2030.0</td>\n      <td>4864.0</td>\n      <td>6880.0</td>\n      <td>8087.0</td>\n      <td>8595.0</td>\n      <td>8743.0</td>\n      <td>8763.0</td>\n      <td>8762.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1991</th>\n      <td>4537.0</td>\n      <td>11527.0</td>\n      <td>15123.0</td>\n      <td>16656.0</td>\n      <td>17321.0</td>\n      <td>18076.0</td>\n      <td>18308.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1992</th>\n      <td>7564.0</td>\n      <td>16061.0</td>\n      <td>22465.0</td>\n      <td>25204.0</td>\n      <td>26517.0</td>\n      <td>27124.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1993</th>\n      <td>8343.0</td>\n      <td>19900.0</td>\n      <td>26732.0</td>\n      <td>30079.0</td>\n      <td>31249.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1994</th>\n      <td>12565.0</td>\n      <td>26922.0</td>\n      <td>33867.0</td>\n      <td>38338.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1995</th>\n      <td>13437.0</td>\n      <td>26012.0</td>\n      <td>31677.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1996</th>\n      <td>12604.0</td>\n      <td>23446.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1997</th>\n      <td>12292.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Polars\n\n::: {#0558b91a .cell execution_count=5}\n``` {.python .cell-code}\ndata = (\n    pl.read_csv(data_filepath)\n    .filter((pl.col(\"GRCODE\") == 43) & (pl.col(\"DevelopmentYear\") <= 1997))\n)\n\ndata\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (55, 13)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>GRCODE</th><th>GRNAME</th><th>AccidentYear</th><th>DevelopmentYear</th><th>DevelopmentLag</th><th>IncurLoss_B</th><th>CumPaidLoss_B</th><th>BulkLoss_B</th><th>EarnedPremDIR_B</th><th>EarnedPremCeded_B</th><th>EarnedPremNet_B</th><th>Single</th><th>PostedReserve97_B</th></tr><tr><td>i64</td><td>str</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>43</td><td>&quot;IDS Property Cas Ins Co&quot;</td><td>1988</td><td>1988</td><td>1</td><td>607</td><td>133</td><td>226</td><td>957</td><td>62</td><td>895</td><td>0</td><td>73044</td></tr><tr><td>43</td><td>&quot;IDS Property Cas Ins Co&quot;</td><td>1988</td><td>1989</td><td>2</td><td>647</td><td>333</td><td>129</td><td>957</td><td>62</td><td>895</td><td>0</td><td>73044</td></tr><tr><td>43</td><td>&quot;IDS Property Cas Ins Co&quot;</td><td>1988</td><td>1990</td><td>3</td><td>582</td><td>431</td><td>38</td><td>957</td><td>62</td><td>895</td><td>0</td><td>73044</td></tr><tr><td>43</td><td>&quot;IDS Property Cas Ins Co&quot;</td><td>1988</td><td>1991</td><td>4</td><td>598</td><td>570</td><td>19</td><td>957</td><td>62</td><td>895</td><td>0</td><td>73044</td></tr><tr><td>43</td><td>&quot;IDS Property Cas Ins Co&quot;</td><td>1988</td><td>1992</td><td>5</td><td>614</td><td>615</td><td>0</td><td>957</td><td>62</td><td>895</td><td>0</td><td>73044</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>43</td><td>&quot;IDS Property Cas Ins Co&quot;</td><td>1995</td><td>1996</td><td>2</td><td>43705</td><td>26012</td><td>9166</td><td>51512</td><td>3883</td><td>47629</td><td>0</td><td>73044</td></tr><tr><td>43</td><td>&quot;IDS Property Cas Ins Co&quot;</td><td>1995</td><td>1997</td><td>3</td><td>42909</td><td>31677</td><td>6571</td><td>51512</td><td>3883</td><td>47629</td><td>0</td><td>73044</td></tr><tr><td>43</td><td>&quot;IDS Property Cas Ins Co&quot;</td><td>1996</td><td>1996</td><td>1</td><td>41837</td><td>12604</td><td>16780</td><td>52481</td><td>5552</td><td>46929</td><td>0</td><td>73044</td></tr><tr><td>43</td><td>&quot;IDS Property Cas Ins Co&quot;</td><td>1996</td><td>1997</td><td>2</td><td>41304</td><td>23446</td><td>10786</td><td>52481</td><td>5552</td><td>46929</td><td>0</td><td>73044</td></tr><tr><td>43</td><td>&quot;IDS Property Cas Ins Co&quot;</td><td>1997</td><td>1997</td><td>1</td><td>44436</td><td>12292</td><td>17959</td><td>56978</td><td>5133</td><td>51845</td><td>0</td><td>73044</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#36ed8d85 .cell execution_count=6}\n``` {.python .cell-code}\ndata.filter(\n    (pl.col(\"GRCODE\") == 43) & (pl.col(\"DevelopmentYear\") <= 1997)\n).pivot(\n    on=\"DevelopmentLag\",\n    index=\"AccidentYear\",\n    values=\"CumPaidLoss_B\"\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (10, 11)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>AccidentYear</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr><tr><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td><td>i64</td></tr></thead><tbody><tr><td>1988</td><td>133</td><td>333</td><td>431</td><td>570</td><td>615</td><td>615</td><td>615</td><td>614</td><td>614</td><td>614</td></tr><tr><td>1989</td><td>934</td><td>1746</td><td>2365</td><td>2579</td><td>2763</td><td>2966</td><td>2940</td><td>2978</td><td>2978</td><td>null</td></tr><tr><td>1990</td><td>2030</td><td>4864</td><td>6880</td><td>8087</td><td>8595</td><td>8743</td><td>8763</td><td>8762</td><td>null</td><td>null</td></tr><tr><td>1991</td><td>4537</td><td>11527</td><td>15123</td><td>16656</td><td>17321</td><td>18076</td><td>18308</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1992</td><td>7564</td><td>16061</td><td>22465</td><td>25204</td><td>26517</td><td>27124</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1993</td><td>8343</td><td>19900</td><td>26732</td><td>30079</td><td>31249</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1994</td><td>12565</td><td>26922</td><td>33867</td><td>38338</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1995</td><td>13437</td><td>26012</td><td>31677</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1996</td><td>12604</td><td>23446</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>1997</td><td>12292</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## DuckDB\n\n::: {#98707aee .cell execution_count=7}\n``` {.python .cell-code}\nduckdb.sql(f\"\"\"\\\nCREATE TABLE data AS\n    SELECT * FROM read_csv('{data_filepath}') WHERE GRCODE = 43 AND DevelopmentYear <= 1997;\n\"\"\")\n```\n:::\n\n\n::: {#9c27550b .cell execution_count=8}\n``` {.python .cell-code}\nduckdb.sql(\"\"\"\\\n    PIVOT data\n    ON DevelopmentLag\n    USING SUM(CumPaidLoss_B)\n    GROUP BY AccidentYear\n    ORDER BY AccidentYear\n\"\"\")\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n┌──────────────┬────────┬────────┬────────┬────────┬────────┬────────┬────────┬────────┬────────┬────────┐\n│ AccidentYear │   1    │   10   │   2    │   3    │   4    │   5    │   6    │   7    │   8    │   9    │\n│    int64     │ int128 │ int128 │ int128 │ int128 │ int128 │ int128 │ int128 │ int128 │ int128 │ int128 │\n├──────────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┤\n│         1988 │    133 │    614 │    333 │    431 │    570 │    615 │    615 │    615 │    614 │    614 │\n│         1989 │    934 │   NULL │   1746 │   2365 │   2579 │   2763 │   2966 │   2940 │   2978 │   2978 │\n│         1990 │   2030 │   NULL │   4864 │   6880 │   8087 │   8595 │   8743 │   8763 │   8762 │   NULL │\n│         1991 │   4537 │   NULL │  11527 │  15123 │  16656 │  17321 │  18076 │  18308 │   NULL │   NULL │\n│         1992 │   7564 │   NULL │  16061 │  22465 │  25204 │  26517 │  27124 │   NULL │   NULL │   NULL │\n│         1993 │   8343 │   NULL │  19900 │  26732 │  30079 │  31249 │   NULL │   NULL │   NULL │   NULL │\n│         1994 │  12565 │   NULL │  26922 │  33867 │  38338 │   NULL │   NULL │   NULL │   NULL │   NULL │\n│         1995 │  13437 │   NULL │  26012 │  31677 │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │\n│         1996 │  12604 │   NULL │  23446 │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │\n│         1997 │  12292 │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │\n├──────────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┤\n│ 10 rows                                                                                     11 columns │\n└────────────────────────────────────────────────────────────────────────────────────────────────────────┘\n```\n:::\n:::\n\n\nUnfortunately, this orders columns as strings so DevelopmentLag 10 comes before DevelopmentLag2. One workaround for this is to left pad (`lpad`) the DevelopmentLag prior to pivoting so the columns sort as expected.\n\n::: {#31cd9cfa .cell execution_count=9}\n``` {.python .cell-code}\nduckdb.sql(\n    \"\"\"\n    WITH cte\n    AS\n    (\n        SELECT * REPLACE (lpad(CAST(DevelopmentLag AS VARCHAR),2,'0')) AS DevelopmentLag\n        FROM data\n        WHERE GRCODE == 43\n        AND DevelopmentYear <= 1997\n    )\n    PIVOT cte\n    ON DevelopmentLag\n    USING SUM(CumPaidLoss_B)\n    GROUP BY AccidentYear\n    ORDER BY AccidentYear\n    \"\"\"\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n┌──────────────┬────────┬────────┬────────┬────────┬────────┬────────┬────────┬────────┬────────┬────────┐\n│ AccidentYear │   01   │   02   │   03   │   04   │   05   │   06   │   07   │   08   │   09   │   10   │\n│    int64     │ int128 │ int128 │ int128 │ int128 │ int128 │ int128 │ int128 │ int128 │ int128 │ int128 │\n├──────────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┼────────┤\n│         1988 │    133 │    333 │    431 │    570 │    615 │    615 │    615 │    614 │    614 │    614 │\n│         1989 │    934 │   1746 │   2365 │   2579 │   2763 │   2966 │   2940 │   2978 │   2978 │   NULL │\n│         1990 │   2030 │   4864 │   6880 │   8087 │   8595 │   8743 │   8763 │   8762 │   NULL │   NULL │\n│         1991 │   4537 │  11527 │  15123 │  16656 │  17321 │  18076 │  18308 │   NULL │   NULL │   NULL │\n│         1992 │   7564 │  16061 │  22465 │  25204 │  26517 │  27124 │   NULL │   NULL │   NULL │   NULL │\n│         1993 │   8343 │  19900 │  26732 │  30079 │  31249 │   NULL │   NULL │   NULL │   NULL │   NULL │\n│         1994 │  12565 │  26922 │  33867 │  38338 │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │\n│         1995 │  13437 │  26012 │  31677 │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │\n│         1996 │  12604 │  23446 │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │\n│         1997 │  12292 │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │   NULL │\n├──────────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┴────────┤\n│ 10 rows                                                                                     11 columns │\n└────────────────────────────────────────────────────────────────────────────────────────────────────────┘\n```\n:::\n:::\n\n\n# Conclusions\n\nWorking as an actuary, it is more than likely that the standard way of building these triangles is using Excel. While none of these tools may feel exceptionally easier than building a triangle in Excel, if you are doing additional analysis using Python, being able to build triangles directly in your notebook may be helpful. Both Pandas and Polars offer similar functionality with similar syntax and ergonomics and are great options for building triangles in Python.\n\nDuckDB is appealing because it using SQL, which is nearly as familiar to most actuaries as Excel. Even though DuckDB's `pivot` statement is not standard SQL, the syntax feels familiar and is easy to work with. Unfortunately, the workaround required to sort the columns in the right order eliminates the complexity benefits from \"just using SQL\", so it is hard to recommend DuckDB for building triangles outside of Excel.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}